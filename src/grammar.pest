WHITESPACE = _{ (" " | "\t" | "\n" | "\r") }

// Keywords

TRUE = { "True" }
FALSE = { "False" }

FOR = _{ "for" }
ENDFOR = { "endfor" }
IF = _{ "if" }
ELSE = _{ "else" }
ENDIF = { "endif" }
LIST_OPEN = _{ "[" }
LIST_CLOSE = _{ "]" }
END_EXPRESSION = { ";;" }
BLOC_OPEN = _{ "{{" }
BLOC_CLOSE = _{ "}}" }
ITER_KEYWORD = _{ "in" }
DO = _{ "do" }

OR  = _{ "or" }
AND = _{ "and" }
NOT = { "not" }


// Operators
ASSIGNMENT_OPERATOR = _{ ":=" }

escape_char = { ("\\" ~ ("\'" | "\\" | "n" | "t" | "r" | "0" | "x" | "u" ~ ASCII_DIGIT* | ASCII_DIGIT{3})) }
simple_string = { (!"'" ~ ANY) }

string = {
    "\'" ~ (escape_char | simple_string)* ~ "\'"
}

start = { program }

program = { (txt ~ program?) | (bloc ~ program?) }


bloc = { BLOC_OPEN ~ expression_list ~ BLOC_CLOSE }

expression_list = { (expression ~ (expression_list)?)? }

expression = { 
    if_statement 
    | for_statement 
    | (print_statement ~ END_EXPRESSION) 
    | (assignment_expression ~ END_EXPRESSION) 
}

if_statement = { IF ~ boolean_expr ~ DO ~ expression_list ~ (ELSE ~ expression_list)? ~ ENDIF }

for_statement = { 
    FOR ~ variable ~ ITER_KEYWORD ~ variable_value ~ DO ~ expression_list ~ ENDFOR |
    FOR ~ variable ~ ITER_KEYWORD ~ list_litteral ~ DO ~ expression_list ~ ENDFOR 
}

print_statement = { "print" ~ string_expression }

variable_value = { "$(" ~ variable_interior ~ ")" }

variable_interior = { variable ~ ("." ~ variable_interior)? }

list_litteral = { LIST_OPEN ~ list_interior ~ LIST_CLOSE }

list_interior = { (string_litterals_interior | variables_list_interior)? }

string_litterals_interior = { string ~ ("," ~ string_litterals_interior)? }

variables_list_interior = { variable ~ ("," ~ variables_list_interior)? }

non_composite_string_part = { string | variable_value }

string_expression = { non_composite_string_part ~ ("." ~ string_expression)? }

// Assignment
assignment_expression = { variable ~ ASSIGNMENT_OPERATOR ~ assignment_values }
assignment_values = { variable_value | string | integer | boolean_literal | list_litteral }

txt = @{ (!BLOC_OPEN ~ !BLOC_CLOSE ~ ANY)+ }

variable = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

integer = { (ASCII_DIGIT)+ }


// Conditions
boolean_literal = { TRUE | FALSE }

boolean_expr = { and_expr }
and_expr = { or_expr ~ (AND ~ or_expr)* }
or_expr = { not_expr ~ (OR ~ not_expr)* }
not_expr = { NOT? ~ atom }
atom = { "(" ~ boolean_expr ~ ")" | boolean_literal }

WHITESPACE = _{ (" " | "\t" | "\n" | "\r" | "\r\n") }
// WHITESPACE = _{ WHITE_SPACE }

// Keywords

TRUE = { "True" }
FALSE = { "False" }

FOR = { "for" }
ENDFOR = { "endfor" }
IF = { "if" }
ELSE = { "else" }
ENDIF = { "endif" }
LIST_OPEN = { "[" }
LIST_CLOSE = { "]" }
END_EXPRESSION = { ";;" }
BLOC_OPEN = { WHITESPACE* ~ "{{" }
BLOC_CLOSE = { "}}" ~ WHITESPACE* }
ITER_KEYWORD = { "in" }
DO = { "do" }

OR  = { "or" }
AND = { "and" }
NOT = { "not" }


// Operators
ASSIGNMENT_OPERATOR = { ":=" }

escape_char = { ("\\" ~ ("'" | "\\" | "n" | "t" | "r" | "0" | "x" | "u" ~ ASCII_DIGIT* | ASCII_DIGIT{3})) }
simple_string = { (!"'" ~ ANY) }

string = {
    "\'" ~ (escape_char | simple_string)* ~ "\'"
}

start = { program }

// program = { (bloc | txt)* }
// program = { (bloc | txt) ~ program? }
program = { (txt ~ program?) | (bloc ~ program?) }


bloc = { BLOC_OPEN ~ expression_list ~ BLOC_CLOSE }

// expression_list = { expression* }
expression_list = { (expression ~ (expression_list)?)? }


expression = { 
    if_statement 
    | for_statement 
    | (print_statement ~ END_EXPRESSION) 
    | (assignment_expression ~ END_EXPRESSION) 
}

if_statement = { 
    IF ~ (boolean_expr | variable_value) ~ DO ~ expression_list ~ (ELSE ~ expression_list)? ~ ENDIF 
}

for_statement = { 
    FOR ~ variable ~ ITER_KEYWORD ~ (variable_value | list_litteral) ~ DO ~ expression_list ~ ENDFOR
}

print_statement = { "print" ~ string_expression }

variable_value = { "$(" ~ variable ~ ")" }

list_litteral = { LIST_OPEN ~ list_interior ~ LIST_CLOSE }

list_interior = { (string_litterals_interior | variables_list_interior)? }

string_litterals_interior = { string ~ ("," ~ string_litterals_interior)? }

variables_list_interior = { variable ~ ("," ~ variables_list_interior)? }

non_composite_string_part = { string | variable_value }

string_expression = { non_composite_string_part ~ ("." ~ string_expression)? }

// Assignment
assignment_expression = { variable ~ ASSIGNMENT_OPERATOR ~ assignment_values }
assignment_values = { variable_value | string | integer | boolean_expr | list_litteral }

txt = { (!BLOC_OPEN ~ !BLOC_CLOSE ~ ANY)+ }
// txt = { (!(BLOC_CLOSE | BLOC_OPEN) ~ ANY)+ }
// txt = { (ANY)+ }


variable = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

integer = { (ASCII_DIGIT)+ }


// Conditions
boolean_literal = { TRUE | FALSE }

boolean_expr = { and_expr }
and_expr = { or_expr ~ (AND ~ or_expr)* }
or_expr = { not_expr ~ (OR ~ not_expr)* }
not_expr = { NOT* ~ boolean_atom }
boolean_atom = { "(" ~ boolean_expr ~ ")" | boolean_literal }
